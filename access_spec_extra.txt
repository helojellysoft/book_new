Access Modifiers in Python : Public, Private and Protected
------------------------------------------------------------
Most programming languages has three forms of access modifiers, which are Public, Protected and Private in a class.
Python uses ‘_’ symbol to determine the access control for a specific data member or a member function of a class. Access specifiers in Python have an important role to play in securing data from unauthorized access and in preventing it from being exploited.
A Class in Python has three types of access modifiers:

Public Access Modifier
Protected Access Modifier
Private Access Modifier

public Access Modidfier
------------------------------------------------------------
# program to illustrate public access modifier in a class

class Stud:
	
	# constructor
	def __init__(self, name, age):
		
		# public data members
		self.stName = name
		self.stAge = age

	# public member function	
	def displayAge(self):
		
		# accessing public data member
		print("Age: ", self.stAge)

# creating object of the class
obj = Stud("R2J", 20)

# accessing public data member
print("Name: ", obj.stName)

# calling public member function of the class
obj.displayAge()


Output: 
Name:  R2J
Age:  20

protected class
--------------------------------------------------------------
# program to illustrate protected access modifier in a class

# super class
class Student:
	
	# protected data members
	_name = None
	_roll = None
	_branch = None
	
	# constructor
	def __init__(self, name, roll, branch):
		self._name = name
		self._roll = roll
		self._branch = branch
	
	# protected member function
	def _displayRollAndBranch(self):

		# accessing protected data members
		print("Roll: ", self._roll)
		print("Branch: ", self._branch)


# derived class
class Tech(Student):

	# constructor
	def __init__(self, name, roll, branch):
				Student.__init__(self, name, roll, branch)
		
	# public member function
	def displayDetails(self):
				
				# accessing protected data members of super class
				print("Name: ", self._name)
				
				# accessing protected member functions of super class
				self._displayRollAndBranch()

# creating objects of the derived class	
obj = Tech("R2J", 1706256, "Information Technology")

# calling public member functions of the class
obj.displayDetails()

